{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useRef, useState } from 'react';\nimport { useChatContext } from '../context/ChatContext';\nconst useWebSocket = () => {\n  _s();\n  const wsRef = useRef(null);\n  const [isConnected, setIsConnected] = useState(false);\n  const {\n    username,\n    isLoggedIn,\n    addMessage,\n    setMessageHistory,\n    setOnlineUsers\n  } = useChatContext();\n  useEffect(() => {\n    if (!isLoggedIn) return;\n    const websocket = new WebSocket('ws://localhost:3001');\n    websocket.onopen = () => {\n      console.log('Connected to server');\n      setIsConnected(true);\n      websocket.send(JSON.stringify({\n        type: 'join',\n        username\n      }));\n    };\n    websocket.onmessage = event => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'history') {\n        setMessageHistory(data.messages);\n      } else if (data.type === 'message') {\n        addMessage(data.message);\n      } else if (data.type === 'users') {\n        setOnlineUsers(data.count);\n      }\n    };\n    websocket.onerror = error => {\n      console.error('WebSocket error:', error);\n      setIsConnected(false);\n    };\n    websocket.onclose = () => {\n      console.log('Disconnected from server');\n      setIsConnected(false);\n    };\n    wsRef.current = websocket;\n    return () => {\n      if (websocket.readyState === WebSocket.OPEN) {\n        websocket.close();\n      }\n    };\n  }, [isLoggedIn, username, addMessage, setMessageHistory, setOnlineUsers]);\n  const sendMessage = text => {\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\n      wsRef.current.send(JSON.stringify({\n        type: 'message',\n        text,\n        username\n      }));\n      return true;\n    }\n    return false;\n  };\n  return {\n    sendMessage,\n    isConnected\n  };\n};\n_s(useWebSocket, \"nz3FvxkESEpkqNEXG0Wa3Bj9wkU=\", false, function () {\n  return [useChatContext];\n});\nexport default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useChatContext","useWebSocket","_s","wsRef","isConnected","setIsConnected","username","isLoggedIn","addMessage","setMessageHistory","setOnlineUsers","websocket","WebSocket","onopen","console","log","send","JSON","stringify","type","onmessage","event","data","parse","messages","message","count","onerror","error","onclose","current","readyState","OPEN","close","sendMessage","text"],"sources":["C:/Users/skk46/OneDrive/AppData/Desktop/chat-app-full/chat-app/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState } from 'react';\r\nimport { useChatContext } from '../context/ChatContext';\r\n\r\nconst useWebSocket = () => {\r\n  const wsRef = useRef(null);\r\n  const [isConnected, setIsConnected] = useState(false);\r\n  const { \r\n    username, \r\n    isLoggedIn, \r\n    addMessage, \r\n    setMessageHistory, \r\n    setOnlineUsers \r\n  } = useChatContext();\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn) return;\r\n\r\n    const websocket = new WebSocket('ws://localhost:3001');\r\n\r\n    websocket.onopen = () => {\r\n      console.log('Connected to server');\r\n      setIsConnected(true);\r\n      websocket.send(JSON.stringify({ type: 'join', username }));\r\n    };\r\n\r\n    websocket.onmessage = (event) => {\r\n      const data = JSON.parse(event.data);\r\n\r\n      if (data.type === 'history') {\r\n        setMessageHistory(data.messages);\r\n      } else if (data.type === 'message') {\r\n        addMessage(data.message);\r\n      } else if (data.type === 'users') {\r\n        setOnlineUsers(data.count);\r\n      }\r\n    };\r\n\r\n    websocket.onerror = (error) => {\r\n      console.error('WebSocket error:', error);\r\n      setIsConnected(false);\r\n    };\r\n\r\n    websocket.onclose = () => {\r\n      console.log('Disconnected from server');\r\n      setIsConnected(false);\r\n    };\r\n\r\n    wsRef.current = websocket;\r\n\r\n    return () => {\r\n      if (websocket.readyState === WebSocket.OPEN) {\r\n        websocket.close();\r\n      }\r\n    };\r\n  }, [isLoggedIn, username, addMessage, setMessageHistory, setOnlineUsers]);\r\n\r\n  const sendMessage = (text) => {\r\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(\r\n        JSON.stringify({\r\n          type: 'message',\r\n          text,\r\n          username\r\n        })\r\n      );\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  return { sendMessage, isConnected };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":";AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACnD,SAASC,cAAc,QAAQ,wBAAwB;AAEvD,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,KAAK,GAAGL,MAAM,CAAC,IAAI,CAAC;EAC1B,MAAM,CAACM,WAAW,EAAEC,cAAc,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM;IACJO,QAAQ;IACRC,UAAU;IACVC,UAAU;IACVC,iBAAiB;IACjBC;EACF,CAAC,GAAGV,cAAc,CAAC,CAAC;EAEpBH,SAAS,CAAC,MAAM;IACd,IAAI,CAACU,UAAU,EAAE;IAEjB,MAAMI,SAAS,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;IAEtDD,SAAS,CAACE,MAAM,GAAG,MAAM;MACvBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCV,cAAc,CAAC,IAAI,CAAC;MACpBM,SAAS,CAACK,IAAI,CAACC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAE,MAAM;QAAEb;MAAS,CAAC,CAAC,CAAC;IAC5D,CAAC;IAEDK,SAAS,CAACS,SAAS,GAAIC,KAAK,IAAK;MAC/B,MAAMC,IAAI,GAAGL,IAAI,CAACM,KAAK,CAACF,KAAK,CAACC,IAAI,CAAC;MAEnC,IAAIA,IAAI,CAACH,IAAI,KAAK,SAAS,EAAE;QAC3BV,iBAAiB,CAACa,IAAI,CAACE,QAAQ,CAAC;MAClC,CAAC,MAAM,IAAIF,IAAI,CAACH,IAAI,KAAK,SAAS,EAAE;QAClCX,UAAU,CAACc,IAAI,CAACG,OAAO,CAAC;MAC1B,CAAC,MAAM,IAAIH,IAAI,CAACH,IAAI,KAAK,OAAO,EAAE;QAChCT,cAAc,CAACY,IAAI,CAACI,KAAK,CAAC;MAC5B;IACF,CAAC;IAEDf,SAAS,CAACgB,OAAO,GAAIC,KAAK,IAAK;MAC7Bd,OAAO,CAACc,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MACxCvB,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;IAEDM,SAAS,CAACkB,OAAO,GAAG,MAAM;MACxBf,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCV,cAAc,CAAC,KAAK,CAAC;IACvB,CAAC;IAEDF,KAAK,CAAC2B,OAAO,GAAGnB,SAAS;IAEzB,OAAO,MAAM;MACX,IAAIA,SAAS,CAACoB,UAAU,KAAKnB,SAAS,CAACoB,IAAI,EAAE;QAC3CrB,SAAS,CAACsB,KAAK,CAAC,CAAC;MACnB;IACF,CAAC;EACH,CAAC,EAAE,CAAC1B,UAAU,EAAED,QAAQ,EAAEE,UAAU,EAAEC,iBAAiB,EAAEC,cAAc,CAAC,CAAC;EAEzE,MAAMwB,WAAW,GAAIC,IAAI,IAAK;IAC5B,IAAIhC,KAAK,CAAC2B,OAAO,IAAI3B,KAAK,CAAC2B,OAAO,CAACC,UAAU,KAAKnB,SAAS,CAACoB,IAAI,EAAE;MAChE7B,KAAK,CAAC2B,OAAO,CAACd,IAAI,CAChBC,IAAI,CAACC,SAAS,CAAC;QACbC,IAAI,EAAE,SAAS;QACfgB,IAAI;QACJ7B;MACF,CAAC,CACH,CAAC;MACD,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC;EAED,OAAO;IAAE4B,WAAW;IAAE9B;EAAY,CAAC;AACrC,CAAC;AAACF,EAAA,CApEID,YAAY;EAAA,QASZD,cAAc;AAAA;AA6DpB,eAAeC,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}