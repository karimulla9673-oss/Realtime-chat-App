{"ast":null,"code":"import{useEffect,useRef,useState,useCallback}from'react';import{useChatContext}from'../context/ChatContext';const useWebSocket=()=>{const wsRef=useRef(null);const reconnectTimeoutRef=useRef(null);const reconnectAttemptsRef=useRef(0);const isConnectingRef=useRef(false);const[isConnected,setIsConnected]=useState(false);const MAX_RECONNECT_ATTEMPTS=5;const RECONNECT_DELAY=3000;const{username,isLoggedIn,addMessage,setMessageHistory,setOnlineUsers}=useChatContext();// ‚úÖ Get WebSocket URL with proper fallback\nconst WS_URL=process.env.REACT_APP_WS_URL||'https://realtime-chat-app-1-sjoa.onrender.com';// ‚úÖ Memoize the message handler to prevent recreating it\nconst handleMessage=useCallback(event=>{try{const data=JSON.parse(event.data);if(data.type==='history'){setMessageHistory(data.messages);}else if(data.type==='message'){addMessage(data.message);}else if(data.type==='users'){setOnlineUsers(data.count);}}catch(error){console.error('‚ö†Ô∏è Error parsing message:',error);}},[addMessage,setMessageHistory,setOnlineUsers]);useEffect(()=>{if(!isLoggedIn||!username){return;}// Prevent multiple simultaneous connection attempts\nif(isConnectingRef.current){return;}// Reset reconnect attempts when starting fresh\nreconnectAttemptsRef.current=0;const connect=()=>{// Stop if max attempts reached\nif(reconnectAttemptsRef.current>=MAX_RECONNECT_ATTEMPTS){console.error('üö´ Max reconnection attempts reached');isConnectingRef.current=false;return;}// Prevent multiple connections\nif(isConnectingRef.current){return;}isConnectingRef.current=true;// Close any existing connection\nif(wsRef.current){wsRef.current.close();}console.log(\"\\uD83D\\uDD0C Connecting to \".concat(WS_URL,\"...\"));const websocket=new WebSocket(WS_URL);websocket.onopen=()=>{console.log('‚úÖ Connected to server');setIsConnected(true);reconnectAttemptsRef.current=0;isConnectingRef.current=false;websocket.send(JSON.stringify({type:'join',username}));};websocket.onmessage=handleMessage;websocket.onerror=error=>{console.error('‚ö†Ô∏è WebSocket error:',error);isConnectingRef.current=false;};websocket.onclose=event=>{console.log('‚ùå Disconnected from server',event.code,event.reason);setIsConnected(false);isConnectingRef.current=false;// Only attempt reconnection if not a clean close and haven't exceeded max attempts\nif(event.code!==1000&&reconnectAttemptsRef.current<MAX_RECONNECT_ATTEMPTS){reconnectAttemptsRef.current+=1;console.log(\"\\uD83D\\uDD04 Reconnection attempt \".concat(reconnectAttemptsRef.current,\"/\").concat(MAX_RECONNECT_ATTEMPTS,\" in \").concat(RECONNECT_DELAY,\"ms\"));reconnectTimeoutRef.current=setTimeout(()=>{connect();},RECONNECT_DELAY);}};wsRef.current=websocket;};// Initial connection\nconnect();// Cleanup function\nreturn()=>{console.log('üßπ Cleaning up WebSocket connection');if(reconnectTimeoutRef.current){clearTimeout(reconnectTimeoutRef.current);reconnectTimeoutRef.current=null;}if(wsRef.current){// Set to max attempts to prevent reconnection during cleanup\nreconnectAttemptsRef.current=MAX_RECONNECT_ATTEMPTS;wsRef.current.onclose=null;// Remove onclose handler to prevent reconnection\nwsRef.current.close(1000,'Component unmounting');wsRef.current=null;}isConnectingRef.current=false;};},[isLoggedIn,username,WS_URL,handleMessage]);// ‚úÖ Send message helper - memoized to prevent recreating\nconst sendMessage=useCallback(text=>{if(wsRef.current&&wsRef.current.readyState===WebSocket.OPEN){wsRef.current.send(JSON.stringify({type:'message',text,username}));return true;}console.warn('‚ö†Ô∏è WebSocket is not connected');return false;},[username]);return{sendMessage,isConnected,reconnectAttempts:reconnectAttemptsRef.current};};export default useWebSocket;","map":{"version":3,"names":["useEffect","useRef","useState","useCallback","useChatContext","useWebSocket","wsRef","reconnectTimeoutRef","reconnectAttemptsRef","isConnectingRef","isConnected","setIsConnected","MAX_RECONNECT_ATTEMPTS","RECONNECT_DELAY","username","isLoggedIn","addMessage","setMessageHistory","setOnlineUsers","WS_URL","process","env","REACT_APP_WS_URL","handleMessage","event","data","JSON","parse","type","messages","message","count","error","console","current","connect","close","log","concat","websocket","WebSocket","onopen","send","stringify","onmessage","onerror","onclose","code","reason","setTimeout","clearTimeout","sendMessage","text","readyState","OPEN","warn","reconnectAttempts"],"sources":["C:/Users/skk46/OneDrive/AppData/Desktop/chat-app-full/chat-app/frontend/src/hooks/useWebSocket.js"],"sourcesContent":["import { useEffect, useRef, useState, useCallback } from 'react';\r\nimport { useChatContext } from '../context/ChatContext';\r\n\r\nconst useWebSocket = () => {\r\n  const wsRef = useRef(null);\r\n  const reconnectTimeoutRef = useRef(null);\r\n  const reconnectAttemptsRef = useRef(0);\r\n  const isConnectingRef = useRef(false);\r\n\r\n  const [isConnected, setIsConnected] = useState(false);\r\n\r\n  const MAX_RECONNECT_ATTEMPTS = 5;\r\n  const RECONNECT_DELAY = 3000;\r\n\r\n  const {\r\n    username,\r\n    isLoggedIn,\r\n    addMessage,\r\n    setMessageHistory,\r\n    setOnlineUsers,\r\n  } = useChatContext();\r\n\r\n  // ‚úÖ Get WebSocket URL with proper fallback\r\n  const WS_URL = process.env.REACT_APP_WS_URL || 'https://realtime-chat-app-1-sjoa.onrender.com';\r\n\r\n  // ‚úÖ Memoize the message handler to prevent recreating it\r\n  const handleMessage = useCallback((event) => {\r\n    try {\r\n      const data = JSON.parse(event.data);\r\n\r\n      if (data.type === 'history') {\r\n        setMessageHistory(data.messages);\r\n      } else if (data.type === 'message') {\r\n        addMessage(data.message);\r\n      } else if (data.type === 'users') {\r\n        setOnlineUsers(data.count);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ö†Ô∏è Error parsing message:', error);\r\n    }\r\n  }, [addMessage, setMessageHistory, setOnlineUsers]);\r\n\r\n  useEffect(() => {\r\n    if (!isLoggedIn || !username) {\r\n      return;\r\n    }\r\n\r\n    // Prevent multiple simultaneous connection attempts\r\n    if (isConnectingRef.current) {\r\n      return;\r\n    }\r\n\r\n    // Reset reconnect attempts when starting fresh\r\n    reconnectAttemptsRef.current = 0;\r\n\r\n    const connect = () => {\r\n      // Stop if max attempts reached\r\n      if (reconnectAttemptsRef.current >= MAX_RECONNECT_ATTEMPTS) {\r\n        console.error('üö´ Max reconnection attempts reached');\r\n        isConnectingRef.current = false;\r\n        return;\r\n      }\r\n\r\n      // Prevent multiple connections\r\n      if (isConnectingRef.current) {\r\n        return;\r\n      }\r\n\r\n      isConnectingRef.current = true;\r\n\r\n      // Close any existing connection\r\n      if (wsRef.current) {\r\n        wsRef.current.close();\r\n      }\r\n\r\n      console.log(`üîå Connecting to ${WS_URL}...`);\r\n      const websocket = new WebSocket(WS_URL);\r\n\r\n      websocket.onopen = () => {\r\n        console.log('‚úÖ Connected to server');\r\n        setIsConnected(true);\r\n        reconnectAttemptsRef.current = 0;\r\n        isConnectingRef.current = false;\r\n        websocket.send(JSON.stringify({ type: 'join', username }));\r\n      };\r\n\r\n      websocket.onmessage = handleMessage;\r\n\r\n      websocket.onerror = (error) => {\r\n        console.error('‚ö†Ô∏è WebSocket error:', error);\r\n        isConnectingRef.current = false;\r\n      };\r\n\r\n      websocket.onclose = (event) => {\r\n        console.log('‚ùå Disconnected from server', event.code, event.reason);\r\n        setIsConnected(false);\r\n        isConnectingRef.current = false;\r\n\r\n        // Only attempt reconnection if not a clean close and haven't exceeded max attempts\r\n        if (event.code !== 1000 && reconnectAttemptsRef.current < MAX_RECONNECT_ATTEMPTS) {\r\n          reconnectAttemptsRef.current += 1;\r\n          console.log(\r\n            `üîÑ Reconnection attempt ${reconnectAttemptsRef.current}/${MAX_RECONNECT_ATTEMPTS} in ${RECONNECT_DELAY}ms`\r\n          );\r\n          \r\n          reconnectTimeoutRef.current = setTimeout(() => {\r\n            connect();\r\n          }, RECONNECT_DELAY);\r\n        }\r\n      };\r\n\r\n      wsRef.current = websocket;\r\n    };\r\n\r\n    // Initial connection\r\n    connect();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      console.log('üßπ Cleaning up WebSocket connection');\r\n      \r\n      if (reconnectTimeoutRef.current) {\r\n        clearTimeout(reconnectTimeoutRef.current);\r\n        reconnectTimeoutRef.current = null;\r\n      }\r\n      \r\n      if (wsRef.current) {\r\n        // Set to max attempts to prevent reconnection during cleanup\r\n        reconnectAttemptsRef.current = MAX_RECONNECT_ATTEMPTS;\r\n        wsRef.current.onclose = null; // Remove onclose handler to prevent reconnection\r\n        wsRef.current.close(1000, 'Component unmounting');\r\n        wsRef.current = null;\r\n      }\r\n      \r\n      isConnectingRef.current = false;\r\n    };\r\n  }, [isLoggedIn, username, WS_URL, handleMessage]);\r\n\r\n  // ‚úÖ Send message helper - memoized to prevent recreating\r\n  const sendMessage = useCallback((text) => {\r\n    if (wsRef.current && wsRef.current.readyState === WebSocket.OPEN) {\r\n      wsRef.current.send(\r\n        JSON.stringify({\r\n          type: 'message',\r\n          text,\r\n          username,\r\n        })\r\n      );\r\n      return true;\r\n    }\r\n    console.warn('‚ö†Ô∏è WebSocket is not connected');\r\n    return false;\r\n  }, [username]);\r\n\r\n  return { \r\n    sendMessage, \r\n    isConnected, \r\n    reconnectAttempts: reconnectAttemptsRef.current \r\n  };\r\n};\r\n\r\nexport default useWebSocket;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}